{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["images","i","imgSrc","push","App","className","centerMode","centerSlidePercentage","number","showArrows","boolean","showStatus","showIndicators","infiniteLoop","showThumbs","useKeyboardArrows","autoPlay","stopOnHover","swipeable","dynamicHeight","emulateTouch","thumbWidth","selectedItem","interval","transitionTime","swipeScrollTolerance","map","img","url","num","key","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qMAYA,I,8EAFMA,EAAS,GAENC,EAAI,EAAGA,GAAK,GAAIA,IAAK,CAC5B,IAAMC,EAAM,oBAAgBD,EAAhB,QAEZD,EAAOG,KAAKD,GAkECE,MA3Bf,WACE,OACE,yBAAKC,UAAU,WAIb,kBAAC,WAAD,eACEA,UAAU,cAEVC,YAAU,EAIVC,sBAAuBC,iBACrB,wBACA,GACA,GAlDU,SAEgB,CAClCC,WAAYC,kBAAQ,cAAc,EALb,WAMrBC,WAAYD,kBAAQ,cAAc,EANb,WAOrBE,eAAgBF,kBAAQ,kBAAkB,EAPrB,WAQrBG,aAAcH,kBAAQ,gBAAgB,EARjB,WASrBI,WAAYJ,kBAAQ,cAAc,EATb,WAUrBK,kBAAmBL,kBAAQ,qBAAqB,EAV3B,WAWrBM,SAAUN,kBAAQ,YAAY,EAXT,WAYrBO,YAAaP,kBAAQ,eAAe,EAZf,WAarBQ,UAAWR,kBAAQ,aAAa,EAbX,WAcrBS,cAAeT,kBAAQ,iBAAiB,EAdnB,WAerBU,aAAcV,kBAAQ,gBAAgB,EAfjB,WAgBrBW,WAAYb,iBAAO,aAAc,IAAK,GAflB,UAgBpBc,aAAcd,iBAAO,eAAgB,EAAG,GAhBpB,UAiBpBe,SAAUf,iBAAO,WAAY,IAAM,GAjBf,UAkBpBgB,eAAgBhB,iBAAO,iBAAkB,IAAM,GAlB3B,UAmBpBiB,qBAAsBjB,iBAAO,uBAAwB,EAAG,GAnBpC,YAwDbR,EAAO0B,KAAI,SAACC,EAAK1B,GAAN,OA7BC2B,EA6BuBD,EA7BlBE,EA6BuB5B,EA3B7C,yBAAK6B,IAAKD,GACR,yBAAKE,IAAKH,EAAKI,IAAKH,EAAKC,IAAKD,KAHhB,IAACD,EAAKC,QClCNI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.02c33520.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'react-responsive-carousel/lib/styles/carousel.min.css'; // requires a loader\nimport { Carousel } from 'react-responsive-carousel';\nimport { boolean, number } from '@storybook/addon-knobs';\n\n// import '../src/main.scss';\n// import '../src/carousel.scss';\n// import '../src/examples/presentation/presentation.scss';\n\nconst images = [];\n\nfor (let i = 0; i <= 34; i++) {\n  const imgSrc = `../images/${i}.jpg`;\n\n  images.push(imgSrc);\n}\n\nconst tooglesGroupId = 'Toggles';\nconst valuesGroupId = 'Values';\nconst mainGroupId = 'Main';\n\nconst getConfigurableProps = () => ({\n  showArrows: boolean('showArrows', true, tooglesGroupId),\n  showStatus: boolean('showStatus', true, tooglesGroupId),\n  showIndicators: boolean('showIndicators', false, tooglesGroupId),\n  infiniteLoop: boolean('infiniteLoop', true, tooglesGroupId),\n  showThumbs: boolean('showThumbs', false, tooglesGroupId),\n  useKeyboardArrows: boolean('useKeyboardArrows', true, tooglesGroupId),\n  autoPlay: boolean('autoPlay', false, tooglesGroupId),\n  stopOnHover: boolean('stopOnHover', true, tooglesGroupId),\n  swipeable: boolean('swipeable', true, tooglesGroupId),\n  dynamicHeight: boolean('dynamicHeight', true, tooglesGroupId),\n  emulateTouch: boolean('emulateTouch', true, tooglesGroupId),\n  thumbWidth: number('thumbWidth', 100, {}, valuesGroupId),\n  selectedItem: number('selectedItem', 0, {}, valuesGroupId),\n  interval: number('interval', 5000, {}, valuesGroupId),\n  transitionTime: number('transitionTime', 1000, {}, valuesGroupId),\n  swipeScrollTolerance: number('swipeScrollTolerance', 5, {}, valuesGroupId)\n});\n\n// <div>\n/* <img src={imgSrc} alt={i} key={i} /> */\n/* <p className=\"legend\">Legend {i}</p> */\n// </div>\n\nconst renderImage = (url, num) => {\n  return (\n    <div key={num}>\n      <img src={url} alt={num} key={num} />\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      {/* // <Carousel className=\"image-stuff\">\n    //   {images.map((img, i) => renderImage(img, i))}\n    // </Carousel> */}\n      <Carousel\n        className=\"image-stuff\"\n        // infiniteLoop\n        centerMode\n        // dynamicHeight\n        // showIndicators\n        // swipeScrollTolerance\n        centerSlidePercentage={number(\n          'centerSlidePercentage',\n          80,\n          {},\n          mainGroupId\n        )}\n        {...getConfigurableProps()}\n      >\n        {images.map((img, i) => renderImage(img, i))}\n      </Carousel>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}